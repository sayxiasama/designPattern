
1. 单例对于 OOP的特性(封装，集成，抽象，多态)不太友好.
    EG: 比如说我们 生成Id我们设置成了单例, 在未来的业务中， 我们需要根据不同的业务生成不同的id. 这时 我们就需要改动所有之前调用Id对象中生成id的所有地方.
  ：） 当然着只是举一个例子.

2.单例会隐藏类之间的依赖关系.
    通过构造函数、参数传递等方式声明的类之间的依赖关系，我们通过查看函数的定义，就能很容易识别出来.
    但是，单例类不需要显示创建、不需要依赖参数传递，在函数中直接调用就可以了.

3.单例对代码的扩展性也不太友好.
   EG: 项目初期, 我们将数据库连接池设计为单例, 后来发现项目中有一些sql 执行的非常缓慢影响到其他sql的执行计划,性能。
   这个时候我们想给慢sql单独建立一个连接池去使用，而我们将数据库连接池设置为单例,就无法适应我们这样的需求变更.
   :) 当然这也只是举一个例子, 一般项目中数据库连接池，线程池这类的资源,一般是不会设置为单例的.

4.单例对测试代码同样不太友好.
   我们知道单例的构造是通过隐式的构造函数创建, 我们测试的时候需要传递参数等等的操作, 就不太支持了.
   ←不过对应的页有解决方法(Method1,Method2,Method3)