1. 单例的定义单例设计模式（Singleton Design Pattern）理解起来非常简单。
   一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。

2. 单例的用处从业务概念上，
   有些数据在系统中只应该保存一份，就比较适合设计为单例类。
   比如，系统的配置信息类。除此之外，我们还可以使用单例解决资源访问冲突的问题。

3.单例的实现
   1.饿汉式
   饿汉模式的实现方法时在类加载的时候就已经创建了instance实例, 所以instance创建的过程时线程安全的. 但是该方法不支持懒加载.

   2.懒汉式
   懒汉模式在获取实例的方法上加了 synchronize 这样一个对象级别的锁. 虽然支持了懒加载. 但是当程序中频繁调用getInstance时， 会导致并发性能的瓶颈.

   3.双重检测
   双重检测，即支持懒加载, 在并发性能上也高于懒汉模式.  一旦 instance被创建 ，再调用getInstance方法时也不会触发加锁逻辑。

   4.静态内部类.
   实现教上述方法简单.  外部类被创建时， 并不会创建内部类的实例, 只有调用getInstance方法的时候才会创建内部类实例.  实例的创建由JVM托管, 唯一性,安全性都得到了保障.

   5.枚举
   最简单的实现方式，基于枚举类型的单例实现。这种实现方式通过 Java 枚举类型本身的特性，保证了实例创建的线程安全性和实例的唯一性。


   欢迎指出问题 ：）