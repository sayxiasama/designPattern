

当创建逻辑比较复杂，是一个“大工程”的时候，我们就考虑使用工厂模式，封装对象的创建过程，将对象的创建和使用相分离。何为创建逻辑比较复杂呢？
我总结了下面两种情况

第一种情况:
          类似规则配置解析的例子，代码中存在 if-else 分支判断，动态地根据不同的类型创建不同的对象。
          针对这种情况，我们就考虑使用工厂模式，将这一大坨 if-else 创建对象的代码抽离出来，放到工厂类中.

还有一种情况:
          尽管我们不需要根据不同的类型创建不同的对象，但是，单个对象本身的创建过程比较复杂，
          比如要组合其他类对象，做各种初始化操作。
          在这种情况下，我们也可以考虑使用工厂模式，将对象的创建过程封装到工厂类中。


判断要不要使用工厂模式的最本质的参考标准。
          封装变化：创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明。
          码复用：创建代码抽离到独立的工厂类之后可以复用。
          隔离复杂性：封装复杂的创建逻辑，调用者无需了解如何创建对象。
          控制复杂度：将创建代码抽离出来，让原本的函数或类职责更单一，代码更简洁