
1.代理模式最常用的一个应用场景，
    在业务系统中开发一些非功能性需求，
    比如：监控、统计、鉴权、限流、事务、幂等、日志。
    我们将这些附加功能与业务功能解耦，放到代理类中统一处理
    实际上，搜集接口请求信息的例子，就是这个应用场景的一个典型例子

2.代理模式在 RPC、缓存中的应用实际上，
    RPC 框架也可以看作一种代理模式，
    GoF 的《设计模式》一书中把它称作远程代理。
    通过远程代理，将网络通信、数据编解码等细节隐藏起来。
    客户端在使用 RPC 服务的时候，就像使用本地函数一样，无需了解跟服务器交互的细节。
    除此之外，RPC 服务的开发者也只需要开发业务逻辑，就像开发本地使用的函数一样，不需要关注跟客户端的交互细节。

3.代理模式在缓存中的应用
    假设我们要开发一个接口请求的缓存功能，
    对于某些接口请求，如果入参相同，在设定的过期时间内，直接返回缓存结果，而不用重新进行逻辑处理。
    比如，针对获取用户个人信息的需求，我们可以开发两个接口，一个支持缓存，一个支持实时查询。
    对于需要实时数据的需求，我们让其调用实时查询接口，对于不需要实时数据的需求，我们让其调用支持缓存的接口。
    那如何来实现接口请求的缓存功能呢？最简单的实现方法就是刚刚我们讲到的，给每个需要支持缓存的查询需求都开发两个不同的接口，一个支持缓存，一个支持实时查询。
    但是，这样做显然增加了开发成本，而且会让代码看起来非常臃肿（接口个数成倍增加），也不方便缓存接口的集中管理（增加、删除缓存接口）、集中配置（比如配置每个接口缓存过期时间）。
    针对这些问题，代理模式就能派上用场了，确切地说，应该是动态代理。如果是基于 Spring 框架来开发的话，那就可以在 AOP 切面中完成接口缓存的功能。
    在应用启动的时候，我们从配置文件中加载需要支持缓存的接口，以及相应的缓存策略（比如过期时间）等。
    当请求到来的时候，我们在 AOP 切面中拦截请求，如果请求中带有支持缓存的字段（比如 http://…?..&cached=true），我们便从缓存（内存缓存或者 Redis 缓存等）中获取数据直接返回。

4.